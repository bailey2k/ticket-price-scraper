#app.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from scraper import SCRAPERS
from send_email_module import send_email
from cfg import settings
from pymongo import MongoClient
from datetime import date, datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from asyncio import run_coroutine_threadsafe
from contextlib import asynccontextmanager
import asyncio


client = MongoClient(settings.mongo_url)
db = client["ticket-tracker"]
events_db = db['tracked_events']

event_loop = None

@asynccontextmanager
async def lifespan(app: FastAPI):
     global event_loop
     event_loop = asyncio.get_running_loop()
     print("[Startup] event loop captured")
     scheduler = BackgroundScheduler()
     scheduler.add_job(check_prices_job, IntervalTrigger(minutes=1))
     scheduler.start()
     yield
     print("[Shutdown] cleanup done.")

# FastAPI app
app = FastAPI(title = "Ticket Price Tracker API",
              description="Track ticket prices and get email alerts when prices drop.",
              version='1.0.0',
              lifespan=lifespan)

# Pydantic models
class TrackRequest(BaseModel):
    site: str
    event_url: str
    event_name: str
    event_date: str
    target_price: float
    email: str

    def to_mongo(self):
        return self.model_dump()
    
class DeleteRequest(BaseModel):
     event_url: str
    
# API endpoints
@app.post("/track", summary="Track a new event", description="Adds a new event to the tracker and stores it in MongoDB.")
def track_event(event: TrackRequest): 
        if events_db.find_one({"event_url": event.event_url}):
            raise HTTPException(status_code = 400, detail="Event is already being tracked")
        else:
            events_db.insert_one(event.to_mongo())
            return {"message": "Event added successfully"}

@app.delete("/events", summary="Delete an event", description="Removes event from MongoDB.")
def delete_event(event: DeleteRequest): 
        if not events_db.find_one({"event_url": event.event_url}):
            raise HTTPException(status_code = 404, detail="Event is not being tracked")
        else:
            events_db.delete_one({"event_url": event.event_url})
            return {"message": "Event deleted successfully"}

@app.get("/events", summary="Get the current tracked events", description="Retrieves the current events stored in MongoDB")
def get_tracked_events():
    events = [TrackRequest(**event) for event in events_db.find({}, {"_id": 0})]
    return events

@app.get("/prices", summary="Check the current prices (while removing old ones)", description="Check the current prices of each event that is currently inside the MongoDB database, but also remove any that are out of date.")
async def check_prices():
    for event in events_db.find():
        curr_event = TrackRequest(**event)

        # if event has passed, remove from database 
        event_date = datetime.strptime(curr_event.event_date, "%Y-%m-%d").date()
        if event_date < date.today():
            events_db.delete_one({"event_url": curr_event.event_url})

        scraper_fx = SCRAPERS.get(curr_event.site)

        if scraper_fx:
            lowest_price = await scraper_fx(curr_event.event_url)
            if lowest_price and lowest_price <= curr_event.target_price:
                send_email (
                    subject=f"üéüÔ∏è Price drop for {curr_event.event_name} on {curr_event.site}!",
                    # hyperlinking to the event page 
                    content= f"""
                    <html>
                    <body style="font-family: Arial, sans-serif; color: #333;">
                        <h2>üéüÔ∏è Price Alert: {curr_event.event_name}</h2>
                        <p><strong>Event Date:</strong> {curr_event.event_date}</p>
                        <p><strong>Current Lowest Price:</strong> <span style="color:green;">${lowest_price}</span></p>
                        <p><strong>Your Target Price:</strong> ${curr_event.target_price}</p>
                        <p>
                        <a href="{curr_event.event_url}" target="_blank" 
                            style="display:inline-block;padding:10px 16px;background-color:#007bff;color:white;
                                    text-decoration:none;border-radius:5px;margin-top:10px;">
                            üé´ View Tickets
                        </a>
                        </p>
                        <hr>
                        <p style="font-size: 0.9em; color: #999;">This alert was generated by Ticket Price Tracker.</p>
                    </body>
                    </html>
                    """,
                    recipient_email= curr_event.email,
                )
        
        # TODO: handling some other form of notification. I like email the most.

def check_prices_job():
     print("[APScheduler] Running check_prices()")
     run_coroutine_threadsafe(check_prices(), event_loop)
